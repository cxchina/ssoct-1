//
// Copyright (C) 2011 LIOM Laboratoire d'Imagerie Optique et Moléculaire
//                    École Polytechnique de Montréal
// Edgar Guevara
// 2011/03/23
// ============================================================================
// Major Functions/Design Description:
//
//   DE4 Development Board + DCC(AD/DA Data Conversion Card) demo
//
//   user interface define
//     LED :
//        LED[0] 	  --> PLL locked indicator.					Light = Locked.
//        LED[1] 	  --> ADC DFS(Data Format Select) indicator.
//        LED[2] 	  --> ADC DCS(Duty Cycle Stabilizer Select) indicator.
//        LED[3] 	  --> ADC Out-of-Range indicator.			Light = Out-of-Range.
//        LED[4] 	  --> 1MHz NCO output disable indicator.	Light = disable.
//        LED[5] 	  --> 10MHz NCO output disable indicator.	Light = disable.
//        LED[6] 	  --> Channel A or B indicator.				Light = channel B select.
//        LED[7] 	  --> Heartbeat.
//      SLIDE_SW : 
//        SLIDE_SW[0] --> ADC DFS(Data Format Select)
//        SLIDE_SW[1] --> ADC DCS(Duty Cycle Stabilizer Select)
//        SLIDE_SW[2] --> Not use
//        SLIDE_SW[3] --> Channel A or B select, High is select channel B.
//      BUTTON : 
//        BUTTON[0]   --> 1MHz NCO output disable
//        BUTTON[1]   --> 10MHz NCO output disable
//        BUTTON[2]   --> Not use
//        BUTTON[3]   --> Not use
//
// ============================================================================
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module ADC_Test02(

	//////////// CLOCK //////////
	GCLKIN,				// 50 kHz A-line (sweep) Trigger
	GCLKOUT_FPGA,
	OSC_50_BANK2,
	OSC_50_BANK3,
	OSC_50_BANK4,
	OSC_50_BANK5,
	OSC_50_BANK6,
	OSC_50_BANK7,
	PLL_CLKIN_p,

	//////////// External PLL //////////
	MAX_I2C_SCLK,
	MAX_I2C_SDAT,

	//////////// LED x 8 //////////
	LED,

	//////////// BUTTON x 4, EXT_IO and CPU_RESET_n //////////
	BUTTON,
	CPU_RESET_n,
	EXT_IO,

	//////////// DIP SWITCH x 8 //////////
	SW,

	//////////// SLIDE SWITCH x 4 //////////
	SLIDE_SW,

	//////////// SEG7 //////////
	SEG0_D,
	SEG0_DP,
	SEG1_D,
	SEG1_DP,

	//////////// Temperature //////////
	TEMP_INT_n,
	TEMP_SMCLK,
	TEMP_SMDAT,

	//////////// Fan //////////
	FAN_CTRL,

	//////////// EEPROM //////////
	EEP_SCL,
	EEP_SDA,

	//////////// SDCARD //////////
	SD_CLK,
	SD_CMD,
	SD_DAT,
	SD_WP_n,

	//////////// Ethernet x 4 //////////
	ETH_INT_n,
	ETH_MDC,
	ETH_MDIO,
	ETH_RST_n,
	ETH_RX_p,
	ETH_TX_p,

	//////////// Flash and SRAM Address/Data Share Bus //////////
	FSM_A,
	FSM_D,

	//////////// Flash Control //////////
	FLASH_ADV_n,
	FLASH_CE_n,
	FLASH_CLK,
	FLASH_OE_n,
	FLASH_RESET_n,
	FLASH_RYBY_n,
	FLASH_WE_n,

	//////////// SSRAM Control //////////
	SSRAM_ADV,
	SSRAM_BWA_n,
	SSRAM_BWB_n,
	SSRAM_CE_n,
	SSRAM_CKE_n,
	SSRAM_CLK,
	SSRAM_OE_n,
	SSRAM_WE_n,

	//////////// HSMC-B, HSMC-B connect to DCC //////////
	AD_SCLK,
	AD_SDIO,
	ADA_D,
	ADA_DCO,
	ADA_OE,
	ADA_OR,
	ADA_SPI_CS,
	ADB_D,
	ADB_DCO,
	ADB_OE,
	ADB_OR,
	ADB_SPI_CS,
	AIC_BCLK,
	AIC_DIN,
	AIC_DOUT,
	AIC_LRCIN,
	AIC_LRCOUT,
	AIC_SPI_CS,
	AIC_XCLK,
	CLKIN1,
	CLKOUT0,
	DA,
	DB,
	FPGA_CLK_A_N,
	FPGA_CLK_A_P,
	FPGA_CLK_B_N,
	FPGA_CLK_B_P,
	J1_152,
	XT_IN_N,
	XT_IN_P,

	//////////// HSMC I2C //////////
	HSMC_SCL,
	HSMC_SDA 
);

//=======================================================
//  PARAMETER declarations
//=======================================================
parameter	NSAMPLES		= 1170;			// Number of samples per A-line

//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input		          		GCLKIN;			// 50 kHz A-line (sweep) Trigger
output		          		GCLKOUT_FPGA;
input		          		OSC_50_BANK2;
input		          		OSC_50_BANK3;
input		          		OSC_50_BANK4;
input		          		OSC_50_BANK5;
input		          		OSC_50_BANK6;
input		          		OSC_50_BANK7;
input		          		PLL_CLKIN_p;

//////////// External PLL //////////
output		          		MAX_I2C_SCLK;
inout		          		MAX_I2C_SDAT;

//////////// LED x 8 //////////
output		     [7:0]		LED;

//////////// BUTTON x 4, EXT_IO and CPU_RESET_n //////////
input		     [3:0]		BUTTON;
input		          		CPU_RESET_n;
inout		          		EXT_IO;

//////////// DIP SWITCH x 8 //////////
input		     [7:0]		SW;

//////////// SLIDE SWITCH x 4 //////////
input		     [3:0]		SLIDE_SW;

//////////// SEG7 //////////
output		     [6:0]		SEG0_D;
output		          		SEG0_DP;
output		     [6:0]		SEG1_D;
output		          		SEG1_DP;

//////////// Temperature //////////
input		          		TEMP_INT_n;
output		          		TEMP_SMCLK;
inout		          		TEMP_SMDAT;

//////////// Fan //////////
output		          		FAN_CTRL;

//////////// EEPROM //////////
output		          		EEP_SCL;
inout		          		EEP_SDA;

//////////// SDCARD //////////
output		          		SD_CLK;
inout		          		SD_CMD;
inout		     [3:0]		SD_DAT;
input		          		SD_WP_n;

//////////// Ethernet x 4 //////////
input		     [3:0]		ETH_INT_n;
output		     [3:0]		ETH_MDC;
inout		     [3:0]		ETH_MDIO;
output		          		ETH_RST_n;
input		     [3:0]		ETH_RX_p;
output		     [3:0]		ETH_TX_p;

//////////// Flash and SRAM Address/Data Share Bus //////////
output		    [25:1]		FSM_A;
inout		    [15:0]		FSM_D;

//////////// Flash Control //////////
output		          		FLASH_ADV_n;
output		          		FLASH_CE_n;
output		          		FLASH_CLK;
output		          		FLASH_OE_n;
output		          		FLASH_RESET_n;
input		          		FLASH_RYBY_n;
output		          		FLASH_WE_n;

//////////// SSRAM Control //////////
output		          		SSRAM_ADV;
output		          		SSRAM_BWA_n;
output		          		SSRAM_BWB_n;
output		          		SSRAM_CE_n;
output		          		SSRAM_CKE_n;
output		          		SSRAM_CLK;
output		          		SSRAM_OE_n;
output		          		SSRAM_WE_n;

//////////// HSMC-B, HSMC-B connect to DCC  //////////
inout		          		AD_SCLK;
inout		          		AD_SDIO;
input		    [13:0]		ADA_D;
input		          		ADA_DCO;
output		          		ADA_OE;
input		          		ADA_OR;
output		          		ADA_SPI_CS;
input		    [13:0]		ADB_D;
input		          		ADB_DCO;
output		          		ADB_OE;
input		          		ADB_OR;
output		          		ADB_SPI_CS;
inout		          		AIC_BCLK;
output		          		AIC_DIN;
input		          		AIC_DOUT;
inout		          		AIC_LRCIN;
inout		          		AIC_LRCOUT;
output		          		AIC_SPI_CS;
output		          		AIC_XCLK;
input		          		CLKIN1;
output		          		CLKOUT0;
output		    [13:0]		DA;
output		    [13:0]		DB;
inout		          		FPGA_CLK_A_N;
inout		          		FPGA_CLK_A_P;
inout		          		FPGA_CLK_B_N;
inout		          		FPGA_CLK_B_P;
inout		          		J1_152;
input		          		XT_IN_N;
input		          		XT_IN_P;

//////////// HSMC I2C //////////
output		          		HSMC_SCL;
inout		          		HSMC_SDA;


//=======================================================
//  REG/WIRE declarations
//=======================================================
wire						reset_n;
wire						sys_clk;
wire						sys_clk_90deg;
wire						sys_clk_180deg;
wire						sys_clk_270deg;
wire						pll_locked;

wire		[12:0]			i_sine1;
wire		[12:0]			i_sine10;
wire		[12:12]			t_sine1;
wire		[12:12]			t_sine10;
reg			[12:0]			is_sine1;
reg			[12:0]			is_sine10;
reg			[12:0]			iu_sine1;
reg			[12:0]			iu_sine10;

wire		[13:0]			o_sine;
reg			[13:0]			o_sine_p;
reg			[13:0]			o_sine_n;

reg			[13:0]			per_a2da_d;
reg			[13:0]			per_a2db_d;
reg			[13:0]			a2da_data;
reg			[13:0]			a2db_data;

wire						heartbeat;

// A-line of 1170 Elements, each 14 bits wide
reg 		[13:0] 			A_line 			[0:NSAMPLES-1];  
wire						sweepTrigger;
reg			[31:0]			count;			// Count for heartbeat
wire		[10:0]			sample_position;// Position of the ADC sample in the A-line



//=======================================================
//  External PLL Configuration ==========================
//=======================================================

//  Signal declarations
wire [ 3: 0] clk1_set_wr, clk2_set_wr, clk3_set_wr;
wire         rstn;
wire         conf_ready;
wire         counter_max;
wire  [7:0]  counter_inc;
reg   [7:0]  auto_set_counter;
reg          conf_wr;

//  Structural coding
assign clk1_set_wr = 4'd12; //625 MHZ
assign clk2_set_wr = 4'd12; //625 MHZ
assign clk3_set_wr = 4'd12; //625 MHZ

assign rstn = CPU_RESET_n;
assign counter_max = &auto_set_counter;
assign counter_inc = auto_set_counter + 1'b1;

always @(posedge OSC_50_BANK2 or negedge rstn)
	if(!rstn)
	begin
		auto_set_counter <= 0;
		conf_wr <= 0;
	end 
	else if (counter_max)
		conf_wr <= 1;
	else
		auto_set_counter <= counter_inc;


ext_pll_ctrl ext_pll_ctrl_Inst(
	.osc_50(OSC_50_BANK2), //50MHZ
	.rstn(rstn),

	// device 1 (HSMA_REFCLK)
	.clk1_set_wr(clk1_set_wr),
	.clk1_set_rd(),

	// device 2 (HSMB_REFCLK)
	.clk2_set_wr(clk2_set_wr),
	.clk2_set_rd(),

	// device 3 (PLL_CLKIN/SATA_REFCLK)
	.clk3_set_wr(clk3_set_wr),
	.clk3_set_rd(),

	// setting trigger
	.conf_wr(conf_wr), // 1T 50MHz 
	.conf_rd(), // 1T 50MHz

	// status 
	.conf_ready(conf_ready),

	// 2-wire interface 
	.max_sclk(MAX_I2C_SCLK),
	.max_sdat(MAX_I2C_SDAT)

);


//=======================================================
//  Structural coding
//=======================================================
//--- globa signal assign
assign	reset_n			= CPU_RESET_n;

assign	FAN_CTRL		= 1'bz;

assign	FPGA_CLK_A_P	=  sys_clk_180deg;
assign	FPGA_CLK_A_N	= ~sys_clk_180deg;
assign	FPGA_CLK_B_P	=  sys_clk_270deg;
assign	FPGA_CLK_B_N	= ~sys_clk_270deg;

// Assign for indicators
assign	LED[0]			= ~pll_locked;		// pll locked
assign	LED[1]			= ~SLIDE_SW[0];		// (DFS)Data Format Select indicator
assign	LED[2]			= ~SLIDE_SW[1];		// (DCS)Duty Cycle Stabilizer Select indicator
assign	LED[3]			= !SLIDE_SW[3] ? ~ADA_OR : ~ADB_OR;	// Out-of-Range indicator
assign	LED[4]			= BUTTON[0];		// reset 1MHz NCO output indicator
assign	LED[5]			= BUTTON[1];		// reset 10MHz NCO output indicator
assign	LED[6] 			= ~SLIDE_SW[3];		// channel A or B indicator
assign	heartbeat		= count[15];		// heartbeat (bit15)
assign	LED[7] 			= heartbeat;		// heartbeat wire

// assign for ADC control signal
assign	AD_SCLK			= SLIDE_SW[0];		// (DFS)Data Format Select
assign	AD_SDIO			= SLIDE_SW[1];		// (DCS)Duty Cycle Stabilizer Select
assign	ADA_OE			= 1'b0;				// enable ADA output
assign	ADA_SPI_CS		= 1'b1;				// disable ADA_SPI_CS (CSB)
assign	ADB_OE			= 1'b0;				// enable ADB output
assign	ADB_SPI_CS		= 1'b1;				// disable ADB_SPI_CS (CSB)

// assign for DAC output data
assign	DA 				= o_sine_p;			// Output 10MHz sine to DAC channel A
assign 	DB 				= a2da_data;		// Map ADC channel A to DAC channel B

// Assign sweep Trigger
assign	sweepTrigger	= GCLKIN;

// 7 Segment Display dot
assign	SEG0_DP 		= ~heartbeat;		// LED[7] inverted
assign	SEG1_DP 		= 1'b1;				// Segment 1 dot OFF = 1

// 7 segment module 0 (faster count)
SevenSegmentDisplayDecoder SevenSegmentDisplayDecoder_inst1(SEG0_D, count[18:15]);

// 7 segment module 1 (slower count)
SevenSegmentDisplayDecoder SevenSegmentDisplayDecoder_inst2(SEG1_D, count[22:19]);

//--- analog to digital converter capture and sync
	//--- Channel A
always @(negedge reset_n or posedge ADA_DCO)
begin
	if (!reset_n) begin
		per_a2da_d	<= 14'd0;
	end
	else begin
		per_a2da_d	<= ADA_D;
	end
end

always @(negedge reset_n or posedge sys_clk)
begin
	if (!reset_n) begin
		a2da_data	<= 14'd0;
	end
	else begin
		a2da_data	<= per_a2da_d;
	end
end

	//--- Channel B
always @(negedge reset_n or posedge ADB_DCO)
begin
	if (!reset_n) begin
		per_a2db_d	<= 14'd0;
	end
	else begin
		per_a2db_d	<= ADB_D;
	end
end

always @(negedge reset_n or posedge sys_clk)
begin
	if (!reset_n) begin
		a2db_data	<= 14'd0;
	end
	else begin
		a2db_data	<= per_a2db_d;
	end
end

//--- count for Heartbeat
always @(negedge reset_n or posedge sweepTrigger)
// 50 kHz A-line (sweep) Trigger
begin
	if (!reset_n) begin
		count	<= 0;
	end
	else begin
		count	<= count + 1'b1;
	end
end


//--- pll for the NCO
pll		pll_inst(
			.inclk0(OSC_50_BANK6),
			.c0(sys_clk),
			.c1(sys_clk_90deg),
			.c2(sys_clk_180deg),
			.c3(sys_clk_270deg),
			.locked(pll_locked)
			);
			
//--- NCO function 1.001MHz
NCO_1MHz	NCO_1MHz_inst(
			.phi_inc_i(32'd42992623),
			.clk(sys_clk),
			.reset_n(BUTTON[0]),
			.clken(1'b1),
			.fsin_o(i_sine1),
			.out_valid()
			);

//--- NCO function 10.01MHz
NCO_10MHz	NCO_10MHz_inst(
			.phi_inc_i(32'd429926226),
			.clk(sys_clk),
			.reset_n(BUTTON[1]),
			.clken(1'b1),
			.fsin_o(i_sine10),
			.out_valid()
			);

always @(negedge reset_n or posedge sys_clk)
begin
	if (!reset_n) begin
		is_sine1	<= 13'd0;
		is_sine10	<= 13'd0;
		iu_sine1	<= 13'd0;
		iu_sine10	<= 13'd0;
	end
	else begin
		is_sine1	<= i_sine1;
		is_sine10	<= i_sine10;
		iu_sine1	<= {~is_sine1[12],is_sine1[11:0]};
		iu_sine10	<= {~is_sine10[12],is_sine10[11:0]};
	end
end

//--- Sum of the two signals
//add		add_inst(
//			.dataa({1'b1,iu_sine1}),
//			.datab({1'b1,iu_sine10}),
//			.result(o_sine)
//			);

// Only assign 10 MHz signal to register
assign o_sine = iu_sine10;

// generation of positive & negative sinus
always @(negedge reset_n or posedge sys_clk)
begin
	if (!reset_n) begin
		o_sine_p	<= 14'd0;
		o_sine_n	<= 14'd0;
	end
	else begin
		o_sine_p	<= o_sine;
		o_sine_n	<= ~o_sine_p;
	end
end

// Synchronization of sampling with sweep trigger
sample_addressing	sample_addressing_inst (
	.clock ( ADA_DCO ),						// k-clock (positive edge)
	.sclr ( ~sweepTrigger ),				// When Sweep Trigger = 0, counter is cleared
	.q ( sample_position )					// Indicates position of the sample in the A-line
	);

// Indexing samples in the A-line array
always @(negedge reset_n or posedge ADA_DCO)
begin
	A_line[sample_position] <= a2da_data;
end

// Probing A-line contents
// TO VERIFY!!!!
Aline_mon	Aline_mon_inst (
	.acq_clk ( ADA_DCO ),
	.acq_data_in ( A_line ),
	.acq_trigger_in ( sweepTrigger )
	);

// FFT of A-line
wire	[5:0]		ifft_source_exp;
wire	[15:0]		ifft_source_real;
wire	[15:0]		ifft_source_imag;
reg 	[16:0]		inputReal;
inputReal	<= 		{ 2b'00, A_line[sample_position] };
fft_Aline fft_Aline_inst1(
	.clk ( ADA_DCO ),
	.reset_n ( reset_n ),
	.inverse ( 1'b0 ),
	.sink_valid ( 1'b1 ),
	.sink_sop ( 1'b0 ),
	.sink_eop ( 1'b0 ),
	.sink_real ( ),
	.sink_imag ( 16b'0 ),
	.sink_error ( 2b'0 ),
	.source_ready ( 1'b1 ),
	.sink_ready ( 1'b1 ),
	.source_error ( 2b'0 ),
	.source_sop ( 1b'0 ),
	.source_eop ( 1b'0 ),
	.source_valid ( 1b'1 ),
	.source_exp ( ifft_source_exp ),
	.source_real ( inputReal ),
	.source_imag ( 16'b0 )
	);
	
endmodule
