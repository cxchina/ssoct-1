// ============================================================================
// Copyright (c) 2010 by Terasic Technologies Inc. 
// ============================================================================
//
// Permission:
//
//   Terasic grants permission to use and modify this code for use
//   in synthesis for all Terasic Development Boards and Altera Development 
//   Kits made by Terasic.  Other use of this code, including the selling 
//   ,duplication, or modification of any portion is strictly prohibited.
//
// Disclaimer:
//
//   This VHDL/Verilog or C/C++ source code is intended as a design reference
//   which illustrates how these types of functions can be implemented.
//   It is the user's responsibility to verify their design for
//   consistency and functionality through the use of formal
//   verification methods.  Terasic provides no warranty regarding the use 
//   or functionality of this code.
//
// ============================================================================
//           
//                     Terasic Technologies Inc
//                     356 Fu-Shin E. Rd Sec. 1. JhuBei City,
//                     HsinChu County, Taiwan
//                     302
//
//                     web: http://www.terasic.com/
//                     email: support@terasic.com
//
// ============================================================================
// Major Functions/Design Description:
//
//   Please refer to DE4_UserManual.pdf in DE4 system CD.
//
// ============================================================================
// Revision History:
// ============================================================================
//   Ver.: |Author:   |Mod. Date:    |Changes Made:
//   V1.0  |Richard   |10/06/30      |
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
//`define USE_DDR2_DIMM2

module DE4_DDR2(

	//////// CLOCK //////////
	GCLKIN,
	GCLKOUT_FPGA,
	MAX_CONF_D,
	MAX_PLL_D,
	OSC_50_Bank2,
	OSC_50_Bank3,
	OSC_50_Bank4,
	OSC_50_Bank5,
	OSC_50_Bank6,
	OSC_50_Bank7,
	PLL_CLKIN_p,

	//////// LED x 8 //////////
	LED,

	//////// BUTTON x 4 //////////
	BUTTON,
	CPU_RESET_n,
	EXT_IO,

`ifndef USE_DDR2_DIMM2
	//////// DDR2 SODIMM //////////
	M1_DDR2_addr,
	M1_DDR2_ba,
	M1_DDR2_cas_n,
	M1_DDR2_cke,
	M1_DDR2_clk,
	M1_DDR2_clk_n,
	M1_DDR2_cs_n,
	M1_DDR2_dm,
	M1_DDR2_dq,
	M1_DDR2_dqs,
	M1_DDR2_dqsn,
	M1_DDR2_odt,
	M1_DDR2_ras_n,
	M1_DDR2_SA,
	M1_DDR2_SCL,
	M1_DDR2_SDA,
	M1_DDR2_we_n

`else
	//////// DDR2 SODIMM //////////

	M2_DDR2_addr,
	M2_DDR2_ba,
	M2_DDR2_cas_n,
	M2_DDR2_cke,
	M2_DDR2_clk,
	M2_DDR2_clk_n,
	M2_DDR2_cs_n,
	M2_DDR2_dm,
	M2_DDR2_dq,
	M2_DDR2_dqs,
	M2_DDR2_dqsn,
	M2_DDR2_odt,
	M2_DDR2_ras_n,
	M2_DDR2_SA,
	M2_DDR2_SCL,
	M2_DDR2_SDA,
	M2_DDR2_we_n 
`endif	//USE_DDR2_DIMM2
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input		          		GCLKIN;
output		          		GCLKOUT_FPGA;
inout		     [2:0]		MAX_CONF_D;
output		     [2:0]		MAX_PLL_D;
input		          		OSC_50_Bank2;
input		          		OSC_50_Bank3;
input		          		OSC_50_Bank4;
input		          		OSC_50_Bank5;
input		          		OSC_50_Bank6;
input		          		OSC_50_Bank7;
input		          		PLL_CLKIN_p;

//////////// LED x 8 //////////
output		     [7:0]		LED;

//////////// BUTTON x 4 //////////
input		     [3:0]		BUTTON;
input		          		CPU_RESET_n;
inout		          		EXT_IO;

`ifndef USE_DDR2_DIMM2
//////////// DDR2 SODIMM //////////
output		    [15:0]		M1_DDR2_addr;
output		     [2:0]		M1_DDR2_ba;
output		          		M1_DDR2_cas_n;
output		     [1:0]		M1_DDR2_cke;
inout		     [1:0]		M1_DDR2_clk;
inout		     [1:0]		M1_DDR2_clk_n;
output		     [1:0]		M1_DDR2_cs_n;
output		     [7:0]		M1_DDR2_dm;
inout		    [63:0]		M1_DDR2_dq;
inout		     [7:0]		M1_DDR2_dqs;
inout		     [7:0]		M1_DDR2_dqsn;
output		     [1:0]		M1_DDR2_odt;
output		          		M1_DDR2_ras_n;
output		     [1:0]		M1_DDR2_SA;
output		          		M1_DDR2_SCL;
inout		          		M1_DDR2_SDA;
output		          		M1_DDR2_we_n;

`else
//////////// DDR2 SODIMM //////////
output		    [15:0]		M2_DDR2_addr;
output		     [2:0]		M2_DDR2_ba;
output		          		M2_DDR2_cas_n;
output		     [1:0]		M2_DDR2_cke;
inout		     [1:0]		M2_DDR2_clk;
inout		     [1:0]		M2_DDR2_clk_n;
output		     [1:0]		M2_DDR2_cs_n;
output		     [7:0]		M2_DDR2_dm;
inout		    [63:0]		M2_DDR2_dq;
inout		     [7:0]		M2_DDR2_dqs;
inout		     [7:0]		M2_DDR2_dqsn;
output		     [1:0]		M2_DDR2_odt;
output		          		M2_DDR2_ras_n;
output		     [1:0]		M2_DDR2_SA;
output		          		M2_DDR2_SCL;
inout		          		M2_DDR2_SDA;
output		          		M2_DDR2_we_n;

`endif //`ifndef USE_DDR2_DIMM2

//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================

wire reset_n;
assign reset_n = CPU_RESET_n;

DE4_SOPC DE4_SOPC_inst(
                  // 1) global signals:
                   .clk_50(OSC_50_Bank3),
                   .reset_n(reset_n),

                  // the_button
                   .in_port_to_the_button(BUTTON),

                  // the_led
                   .out_port_from_the_led(LED),

`ifndef USE_DDR2_DIMM2
                  // the_ddr2
                   .aux_scan_clk_from_the_ddr2(),
                   .aux_scan_clk_reset_n_from_the_ddr2(),
                   .dll_reference_clk_from_the_ddr2(),
                   .dqs_delay_ctrl_export_from_the_ddr2(),
                   .global_reset_n_to_the_ddr2(reset_n),
                   .local_init_done_from_the_ddr2(),
                   .local_refresh_ack_from_the_ddr2(),
                   .local_wdata_req_from_the_ddr2(),
                   .mem_addr_from_the_ddr2(M1_DDR2_addr),
                   .mem_ba_from_the_ddr2(M1_DDR2_ba),
                   .mem_cas_n_from_the_ddr2(M1_DDR2_cas_n),
                   .mem_cke_from_the_ddr2(M1_DDR2_cke),
                   .mem_clk_n_to_and_from_the_ddr2(M1_DDR2_clk_n),
                   .mem_clk_to_and_from_the_ddr2(M1_DDR2_clk),
                   .mem_cs_n_from_the_ddr2(M1_DDR2_cs_n),
                   .mem_dm_from_the_ddr2(M1_DDR2_dm),
                   .mem_dq_to_and_from_the_ddr2(M1_DDR2_dq),
                   .mem_dqs_to_and_from_the_ddr2(M1_DDR2_dqs),
                   .mem_dqsn_to_and_from_the_ddr2(M1_DDR2_dqsn),
                   .mem_odt_from_the_ddr2(M1_DDR2_odt),
                   .mem_ras_n_from_the_ddr2(M1_DDR2_ras_n),
                   .mem_we_n_from_the_ddr2(M1_DDR2_we_n),
                   .oct_ctl_rs_value_to_the_ddr2(),
                   .oct_ctl_rt_value_to_the_ddr2(),
                   .reset_phy_clk_n_from_the_ddr2(),
                   
                  // ddr2 psd i2c
                   .out_port_from_the_ddr2_i2c_scl(M1_DDR2_SCL),
                   .out_port_from_the_ddr2_i2c_sa(M1_DDR2_SA),
                   .bidir_port_to_and_from_the_ddr2_i2c_sda(M1_DDR2_SDA)                   
`else              

                  // the_ddr2
                   .aux_scan_clk_from_the_ddr2(),
                   .aux_scan_clk_reset_n_from_the_ddr2(),
                   .dll_reference_clk_from_the_ddr2(),
                   .dqs_delay_ctrl_export_from_the_ddr2(),
                   .global_reset_n_to_the_ddr2(reset_n),
                   .local_init_done_from_the_ddr2(),
                   .local_refresh_ack_from_the_ddr2(),
                   .local_wdata_req_from_the_ddr2(),
                   .mem_addr_from_the_ddr2(M2_DDR2_addr),
                   .mem_ba_from_the_ddr2(M2_DDR2_ba),
                   .mem_cas_n_from_the_ddr2(M2_DDR2_cas_n),
                   .mem_cke_from_the_ddr2(M2_DDR2_cke),
                   .mem_clk_n_to_and_from_the_ddr2(M2_DDR2_clk_n),
                   .mem_clk_to_and_from_the_ddr2(M2_DDR2_clk),
                   .mem_cs_n_from_the_ddr2(M2_DDR2_cs_n),
                   .mem_dm_from_the_ddr2(M2_DDR2_dm),
                   .mem_dq_to_and_from_the_ddr2(M2_DDR2_dq),
                   .mem_dqs_to_and_from_the_ddr2(M2_DDR2_dqs),
                   .mem_dqsn_to_and_from_the_ddr2(M2_DDR2_dqsn),
                   .mem_odt_from_the_ddr2(M2_DDR2_odt),
                   .mem_ras_n_from_the_ddr2(M2_DDR2_ras_n),
                   .mem_we_n_from_the_ddr2(M2_DDR2_we_n),
                   .oct_ctl_rs_value_to_the_ddr2(),
                   .oct_ctl_rt_value_to_the_ddr2(),
                   .reset_phy_clk_n_from_the_ddr2(),
                   
                  // ddr2 psd i2c
                   .out_port_from_the_ddr2_i2c_scl(M2_DDR2_SCL),
                   .out_port_from_the_ddr2_i2c_sa(M2_DDR2_SA),
                   .bidir_port_to_and_from_the_ddr2_i2c_sda(M2_DDR2_SDA)       
`endif                   

                );




endmodule
