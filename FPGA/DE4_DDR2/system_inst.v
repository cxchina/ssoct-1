// Copyright (C) 1991-2010 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.


// Generated by Quartus II 64-Bit Version 9.1 (Build Build 350 03/24/2010)
// Created on Fri Aug 05 17:11:39 2011

system system_inst
(
	.clock_master(clock_master_sig) ,	// input  clock_master_sig
	.ddr2_aux_full_rate_clk_out(ddr2_aux_full_rate_clk_out_sig) ,	// output  ddr2_aux_full_rate_clk_out_sig
	.ddr2_aux_half_rate_clk_out(ddr2_aux_half_rate_clk_out_sig) ,	// output  ddr2_aux_half_rate_clk_out_sig
	.ddr2_phy_clk_out(ddr2_phy_clk_out_sig) ,	// output  ddr2_phy_clk_out_sig
	.reset_n(reset_n_sig) ,	// input  reset_n_sig
	.aux_scan_clk_from_the_ddr2(aux_scan_clk_from_the_ddr2_sig) ,	// output  aux_scan_clk_from_the_ddr2_sig
	.aux_scan_clk_reset_n_from_the_ddr2(aux_scan_clk_reset_n_from_the_ddr2_sig) ,	// output  aux_scan_clk_reset_n_from_the_ddr2_sig
	.dll_reference_clk_from_the_ddr2(dll_reference_clk_from_the_ddr2_sig) ,	// output  dll_reference_clk_from_the_ddr2_sig
	.dqs_delay_ctrl_export_from_the_ddr2(dqs_delay_ctrl_export_from_the_ddr2_sig) ,	// output [5:0] dqs_delay_ctrl_export_from_the_ddr2_sig
	.global_reset_n_to_the_ddr2(global_reset_n_to_the_ddr2_sig) ,	// input  global_reset_n_to_the_ddr2_sig
	.local_init_done_from_the_ddr2(local_init_done_from_the_ddr2_sig) ,	// output  local_init_done_from_the_ddr2_sig
	.local_refresh_ack_from_the_ddr2(local_refresh_ack_from_the_ddr2_sig) ,	// output  local_refresh_ack_from_the_ddr2_sig
	.local_wdata_req_from_the_ddr2(local_wdata_req_from_the_ddr2_sig) ,	// output  local_wdata_req_from_the_ddr2_sig
	.mem_addr_from_the_ddr2(mem_addr_from_the_ddr2_sig) ,	// output [13:0] mem_addr_from_the_ddr2_sig
	.mem_ba_from_the_ddr2(mem_ba_from_the_ddr2_sig) ,	// output [2:0] mem_ba_from_the_ddr2_sig
	.mem_cas_n_from_the_ddr2(mem_cas_n_from_the_ddr2_sig) ,	// output  mem_cas_n_from_the_ddr2_sig
	.mem_cke_from_the_ddr2(mem_cke_from_the_ddr2_sig) ,	// output  mem_cke_from_the_ddr2_sig
	.mem_clk_n_to_and_from_the_ddr2(mem_clk_n_to_and_from_the_ddr2_sig) ,	// inout [1:0] mem_clk_n_to_and_from_the_ddr2_sig
	.mem_clk_to_and_from_the_ddr2(mem_clk_to_and_from_the_ddr2_sig) ,	// inout [1:0] mem_clk_to_and_from_the_ddr2_sig
	.mem_cs_n_from_the_ddr2(mem_cs_n_from_the_ddr2_sig) ,	// output  mem_cs_n_from_the_ddr2_sig
	.mem_dm_from_the_ddr2(mem_dm_from_the_ddr2_sig) ,	// output [7:0] mem_dm_from_the_ddr2_sig
	.mem_dq_to_and_from_the_ddr2(mem_dq_to_and_from_the_ddr2_sig) ,	// inout [63:0] mem_dq_to_and_from_the_ddr2_sig
	.mem_dqs_to_and_from_the_ddr2(mem_dqs_to_and_from_the_ddr2_sig) ,	// inout [7:0] mem_dqs_to_and_from_the_ddr2_sig
	.mem_dqsn_to_and_from_the_ddr2(mem_dqsn_to_and_from_the_ddr2_sig) ,	// inout [7:0] mem_dqsn_to_and_from_the_ddr2_sig
	.mem_odt_from_the_ddr2(mem_odt_from_the_ddr2_sig) ,	// output  mem_odt_from_the_ddr2_sig
	.mem_ras_n_from_the_ddr2(mem_ras_n_from_the_ddr2_sig) ,	// output  mem_ras_n_from_the_ddr2_sig
	.mem_we_n_from_the_ddr2(mem_we_n_from_the_ddr2_sig) ,	// output  mem_we_n_from_the_ddr2_sig
	.oct_ctl_rs_value_to_the_ddr2(oct_ctl_rs_value_to_the_ddr2_sig) ,	// input [13:0] oct_ctl_rs_value_to_the_ddr2_sig
	.oct_ctl_rt_value_to_the_ddr2(oct_ctl_rt_value_to_the_ddr2_sig) ,	// input [13:0] oct_ctl_rt_value_to_the_ddr2_sig
	.reset_phy_clk_n_from_the_ddr2(reset_phy_clk_n_from_the_ddr2_sig) ,	// output  reset_phy_clk_n_from_the_ddr2_sig
	.control_done_from_the_master_read(control_done_from_the_master_read_sig) ,	// output  control_done_from_the_master_read_sig
	.control_early_done_from_the_master_read(control_early_done_from_the_master_read_sig) ,	// output  control_early_done_from_the_master_read_sig
	.control_fixed_location_to_the_master_read(control_fixed_location_to_the_master_read_sig) ,	// input  control_fixed_location_to_the_master_read_sig
	.control_go_to_the_master_read(control_go_to_the_master_read_sig) ,	// input  control_go_to_the_master_read_sig
	.control_read_base_to_the_master_read(control_read_base_to_the_master_read_sig) ,	// input [29:0] control_read_base_to_the_master_read_sig
	.control_read_length_to_the_master_read(control_read_length_to_the_master_read_sig) ,	// input [29:0] control_read_length_to_the_master_read_sig
	.user_buffer_output_data_from_the_master_read(user_buffer_output_data_from_the_master_read_sig) ,	// output [31:0] user_buffer_output_data_from_the_master_read_sig
	.user_data_available_from_the_master_read(user_data_available_from_the_master_read_sig) ,	// output  user_data_available_from_the_master_read_sig
	.user_read_buffer_to_the_master_read(user_read_buffer_to_the_master_read_sig) ,	// input  user_read_buffer_to_the_master_read_sig
	.control_done_from_the_master_write(control_done_from_the_master_write_sig) ,	// output  control_done_from_the_master_write_sig
	.control_fixed_location_to_the_master_write(control_fixed_location_to_the_master_write_sig) ,	// input  control_fixed_location_to_the_master_write_sig
	.control_go_to_the_master_write(control_go_to_the_master_write_sig) ,	// input  control_go_to_the_master_write_sig
	.control_write_base_to_the_master_write(control_write_base_to_the_master_write_sig) ,	// input [29:0] control_write_base_to_the_master_write_sig
	.control_write_length_to_the_master_write(control_write_length_to_the_master_write_sig) ,	// input [29:0] control_write_length_to_the_master_write_sig
	.user_buffer_full_from_the_master_write(user_buffer_full_from_the_master_write_sig) ,	// output  user_buffer_full_from_the_master_write_sig
	.user_buffer_input_data_to_the_master_write(user_buffer_input_data_to_the_master_write_sig) ,	// input [31:0] user_buffer_input_data_to_the_master_write_sig
	.user_write_buffer_to_the_master_write(user_write_buffer_to_the_master_write_sig) 	// input  user_write_buffer_to_the_master_write_sig
);

