// Copyright (C) 1991-2010 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.


// Generated by Quartus II 64-Bit Version 9.1 (Build Build 350 03/24/2010)
// Created on Sat Sep 17 16:58:33 2011

DE4_SOPC DE4_SOPC_inst
(
	.clk_50(clk_50_sig) ,	// input  clk_50_sig
	.ddr2_aux_full_rate_clk_out(ddr2_aux_full_rate_clk_out_sig) ,	// output  ddr2_aux_full_rate_clk_out_sig
	.ddr2_aux_half_rate_clk_out(ddr2_aux_half_rate_clk_out_sig) ,	// output  ddr2_aux_half_rate_clk_out_sig
	.ddr2_phy_clk_out(ddr2_phy_clk_out_sig) ,	// output  ddr2_phy_clk_out_sig
	.pll_peripheral_clk(pll_peripheral_clk_sig) ,	// output  pll_peripheral_clk_sig
	.pll_sys_clk(pll_sys_clk_sig) ,	// output  pll_sys_clk_sig
	.reset_n(reset_n_sig) ,	// input  reset_n_sig
	.aux_scan_clk_from_the_ddr2(aux_scan_clk_from_the_ddr2_sig) ,	// output  aux_scan_clk_from_the_ddr2_sig
	.aux_scan_clk_reset_n_from_the_ddr2(aux_scan_clk_reset_n_from_the_ddr2_sig) ,	// output  aux_scan_clk_reset_n_from_the_ddr2_sig
	.dll_reference_clk_from_the_ddr2(dll_reference_clk_from_the_ddr2_sig) ,	// output  dll_reference_clk_from_the_ddr2_sig
	.dqs_delay_ctrl_export_from_the_ddr2(dqs_delay_ctrl_export_from_the_ddr2_sig) ,	// output [5:0] dqs_delay_ctrl_export_from_the_ddr2_sig
	.global_reset_n_to_the_ddr2(global_reset_n_to_the_ddr2_sig) ,	// input  global_reset_n_to_the_ddr2_sig
	.local_init_done_from_the_ddr2(local_init_done_from_the_ddr2_sig) ,	// output  local_init_done_from_the_ddr2_sig
	.local_refresh_ack_from_the_ddr2(local_refresh_ack_from_the_ddr2_sig) ,	// output  local_refresh_ack_from_the_ddr2_sig
	.local_wdata_req_from_the_ddr2(local_wdata_req_from_the_ddr2_sig) ,	// output  local_wdata_req_from_the_ddr2_sig
	.mem_addr_from_the_ddr2(mem_addr_from_the_ddr2_sig) ,	// output [13:0] mem_addr_from_the_ddr2_sig
	.mem_ba_from_the_ddr2(mem_ba_from_the_ddr2_sig) ,	// output [2:0] mem_ba_from_the_ddr2_sig
	.mem_cas_n_from_the_ddr2(mem_cas_n_from_the_ddr2_sig) ,	// output  mem_cas_n_from_the_ddr2_sig
	.mem_cke_from_the_ddr2(mem_cke_from_the_ddr2_sig) ,	// output  mem_cke_from_the_ddr2_sig
	.mem_clk_n_to_and_from_the_ddr2(mem_clk_n_to_and_from_the_ddr2_sig) ,	// inout [1:0] mem_clk_n_to_and_from_the_ddr2_sig
	.mem_clk_to_and_from_the_ddr2(mem_clk_to_and_from_the_ddr2_sig) ,	// inout [1:0] mem_clk_to_and_from_the_ddr2_sig
	.mem_cs_n_from_the_ddr2(mem_cs_n_from_the_ddr2_sig) ,	// output  mem_cs_n_from_the_ddr2_sig
	.mem_dm_from_the_ddr2(mem_dm_from_the_ddr2_sig) ,	// output [7:0] mem_dm_from_the_ddr2_sig
	.mem_dq_to_and_from_the_ddr2(mem_dq_to_and_from_the_ddr2_sig) ,	// inout [63:0] mem_dq_to_and_from_the_ddr2_sig
	.mem_dqs_to_and_from_the_ddr2(mem_dqs_to_and_from_the_ddr2_sig) ,	// inout [7:0] mem_dqs_to_and_from_the_ddr2_sig
	.mem_dqsn_to_and_from_the_ddr2(mem_dqsn_to_and_from_the_ddr2_sig) ,	// inout [7:0] mem_dqsn_to_and_from_the_ddr2_sig
	.mem_odt_from_the_ddr2(mem_odt_from_the_ddr2_sig) ,	// output  mem_odt_from_the_ddr2_sig
	.mem_ras_n_from_the_ddr2(mem_ras_n_from_the_ddr2_sig) ,	// output  mem_ras_n_from_the_ddr2_sig
	.mem_we_n_from_the_ddr2(mem_we_n_from_the_ddr2_sig) ,	// output  mem_we_n_from_the_ddr2_sig
	.oct_ctl_rs_value_to_the_ddr2(oct_ctl_rs_value_to_the_ddr2_sig) ,	// input [13:0] oct_ctl_rs_value_to_the_ddr2_sig
	.oct_ctl_rt_value_to_the_ddr2(oct_ctl_rt_value_to_the_ddr2_sig) ,	// input [13:0] oct_ctl_rt_value_to_the_ddr2_sig
	.reset_phy_clk_n_from_the_ddr2(reset_phy_clk_n_from_the_ddr2_sig) ,	// output  reset_phy_clk_n_from_the_ddr2_sig
	.flash_tristate_bridge_address(flash_tristate_bridge_address_sig) ,	// output [24:0] flash_tristate_bridge_address_sig
	.flash_tristate_bridge_data(flash_tristate_bridge_data_sig) ,	// inout [15:0] flash_tristate_bridge_data_sig
	.flash_tristate_bridge_readn(flash_tristate_bridge_readn_sig) ,	// output  flash_tristate_bridge_readn_sig
	.flash_tristate_bridge_writen(flash_tristate_bridge_writen_sig) ,	// output  flash_tristate_bridge_writen_sig
	.select_n_to_the_ext_flash(select_n_to_the_ext_flash_sig) ,	// output  select_n_to_the_ext_flash_sig
	.control_done_from_the_master_read(control_done_from_the_master_read_sig) ,	// output  control_done_from_the_master_read_sig
	.control_early_done_from_the_master_read(control_early_done_from_the_master_read_sig) ,	// output  control_early_done_from_the_master_read_sig
	.control_fixed_location_to_the_master_read(control_fixed_location_to_the_master_read_sig) ,	// input  control_fixed_location_to_the_master_read_sig
	.control_go_to_the_master_read(control_go_to_the_master_read_sig) ,	// input  control_go_to_the_master_read_sig
	.control_read_base_to_the_master_read(control_read_base_to_the_master_read_sig) ,	// input [29:0] control_read_base_to_the_master_read_sig
	.control_read_length_to_the_master_read(control_read_length_to_the_master_read_sig) ,	// input [29:0] control_read_length_to_the_master_read_sig
	.user_buffer_output_data_from_the_master_read(user_buffer_output_data_from_the_master_read_sig) ,	// output [255:0] user_buffer_output_data_from_the_master_read_sig
	.user_data_available_from_the_master_read(user_data_available_from_the_master_read_sig) ,	// output  user_data_available_from_the_master_read_sig
	.user_read_buffer_to_the_master_read(user_read_buffer_to_the_master_read_sig) ,	// input  user_read_buffer_to_the_master_read_sig
	.control_done_from_the_master_write(control_done_from_the_master_write_sig) ,	// output  control_done_from_the_master_write_sig
	.control_fixed_location_to_the_master_write(control_fixed_location_to_the_master_write_sig) ,	// input  control_fixed_location_to_the_master_write_sig
	.control_go_to_the_master_write(control_go_to_the_master_write_sig) ,	// input  control_go_to_the_master_write_sig
	.control_write_base_to_the_master_write(control_write_base_to_the_master_write_sig) ,	// input [29:0] control_write_base_to_the_master_write_sig
	.control_write_length_to_the_master_write(control_write_length_to_the_master_write_sig) ,	// input [29:0] control_write_length_to_the_master_write_sig
	.user_buffer_full_from_the_master_write(user_buffer_full_from_the_master_write_sig) ,	// output  user_buffer_full_from_the_master_write_sig
	.user_buffer_input_data_to_the_master_write(user_buffer_input_data_to_the_master_write_sig) ,	// input [255:0] user_buffer_input_data_to_the_master_write_sig
	.user_write_buffer_to_the_master_write(user_write_buffer_to_the_master_write_sig) ,	// input  user_write_buffer_to_the_master_write_sig
	.led_an_from_the_tse_mac(led_an_from_the_tse_mac_sig) ,	// output  led_an_from_the_tse_mac_sig
	.led_char_err_from_the_tse_mac(led_char_err_from_the_tse_mac_sig) ,	// output  led_char_err_from_the_tse_mac_sig
	.led_col_from_the_tse_mac(led_col_from_the_tse_mac_sig) ,	// output  led_col_from_the_tse_mac_sig
	.led_crs_from_the_tse_mac(led_crs_from_the_tse_mac_sig) ,	// output  led_crs_from_the_tse_mac_sig
	.led_disp_err_from_the_tse_mac(led_disp_err_from_the_tse_mac_sig) ,	// output  led_disp_err_from_the_tse_mac_sig
	.led_link_from_the_tse_mac(led_link_from_the_tse_mac_sig) ,	// output  led_link_from_the_tse_mac_sig
	.mdc_from_the_tse_mac(mdc_from_the_tse_mac_sig) ,	// output  mdc_from_the_tse_mac_sig
	.mdio_in_to_the_tse_mac(mdio_in_to_the_tse_mac_sig) ,	// input  mdio_in_to_the_tse_mac_sig
	.mdio_oen_from_the_tse_mac(mdio_oen_from_the_tse_mac_sig) ,	// output  mdio_oen_from_the_tse_mac_sig
	.mdio_out_from_the_tse_mac(mdio_out_from_the_tse_mac_sig) ,	// output  mdio_out_from_the_tse_mac_sig
	.ref_clk_to_the_tse_mac(ref_clk_to_the_tse_mac_sig) ,	// input  ref_clk_to_the_tse_mac_sig
	.rxp_to_the_tse_mac(rxp_to_the_tse_mac_sig) ,	// input  rxp_to_the_tse_mac_sig
	.txp_from_the_tse_mac(txp_from_the_tse_mac_sig) ,	// output  txp_from_the_tse_mac_sig
	.out_port_from_the_vol_transfer_done_pio(out_port_from_the_vol_transfer_done_pio_sig) 	// output  out_port_from_the_vol_transfer_done_pio_sig
);

