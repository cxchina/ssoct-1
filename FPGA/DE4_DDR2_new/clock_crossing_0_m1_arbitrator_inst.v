// Copyright (C) 1991-2010 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.


// Generated by Quartus II 64-Bit Version 9.1 (Build Build 350 03/24/2010)
// Created on Thu Sep 15 19:44:19 2011

clock_crossing_0_m1_arbitrator clock_crossing_0_m1_arbitrator_inst
(
	.DE4_SOPC_burst_0_upstream_readdata_from_sa(DE4_SOPC_burst_0_upstream_readdata_from_sa_sig) ,	// input [255:0] DE4_SOPC_burst_0_upstream_readdata_from_sa_sig
	.DE4_SOPC_burst_0_upstream_waitrequest_from_sa(DE4_SOPC_burst_0_upstream_waitrequest_from_sa_sig) ,	// input  DE4_SOPC_burst_0_upstream_waitrequest_from_sa_sig
	.clk(clk_sig) ,	// input  clk_sig
	.clock_crossing_0_m1_address(clock_crossing_0_m1_address_sig) ,	// input [29:0] clock_crossing_0_m1_address_sig
	.clock_crossing_0_m1_burstcount(clock_crossing_0_m1_burstcount_sig) ,	// input [3:0] clock_crossing_0_m1_burstcount_sig
	.clock_crossing_0_m1_byteenable(clock_crossing_0_m1_byteenable_sig) ,	// input [31:0] clock_crossing_0_m1_byteenable_sig
	.clock_crossing_0_m1_granted_DE4_SOPC_burst_0_upstream(clock_crossing_0_m1_granted_DE4_SOPC_burst_0_upstream_sig) ,	// input  clock_crossing_0_m1_granted_DE4_SOPC_burst_0_upstream_sig
	.clock_crossing_0_m1_qualified_request_DE4_SOPC_burst_0_upstream(clock_crossing_0_m1_qualified_request_DE4_SOPC_burst_0_upstream_sig) ,	// input  clock_crossing_0_m1_qualified_request_DE4_SOPC_burst_0_upstream_sig
	.clock_crossing_0_m1_read(clock_crossing_0_m1_read_sig) ,	// input  clock_crossing_0_m1_read_sig
	.clock_crossing_0_m1_read_data_valid_DE4_SOPC_burst_0_upstream(clock_crossing_0_m1_read_data_valid_DE4_SOPC_burst_0_upstream_sig) ,	// input  clock_crossing_0_m1_read_data_valid_DE4_SOPC_burst_0_upstream_sig
	.clock_crossing_0_m1_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register(clock_crossing_0_m1_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register_sig) ,	// input  clock_crossing_0_m1_read_data_valid_DE4_SOPC_burst_0_upstream_shift_register_sig
	.clock_crossing_0_m1_requests_DE4_SOPC_burst_0_upstream(clock_crossing_0_m1_requests_DE4_SOPC_burst_0_upstream_sig) ,	// input  clock_crossing_0_m1_requests_DE4_SOPC_burst_0_upstream_sig
	.clock_crossing_0_m1_write(clock_crossing_0_m1_write_sig) ,	// input  clock_crossing_0_m1_write_sig
	.clock_crossing_0_m1_writedata(clock_crossing_0_m1_writedata_sig) ,	// input [255:0] clock_crossing_0_m1_writedata_sig
	.d1_DE4_SOPC_burst_0_upstream_end_xfer(d1_DE4_SOPC_burst_0_upstream_end_xfer_sig) ,	// input  d1_DE4_SOPC_burst_0_upstream_end_xfer_sig
	.reset_n(reset_n_sig) ,	// input  reset_n_sig
	.clock_crossing_0_m1_address_to_slave(clock_crossing_0_m1_address_to_slave_sig) ,	// output [29:0] clock_crossing_0_m1_address_to_slave_sig
	.clock_crossing_0_m1_latency_counter(clock_crossing_0_m1_latency_counter_sig) ,	// output  clock_crossing_0_m1_latency_counter_sig
	.clock_crossing_0_m1_readdata(clock_crossing_0_m1_readdata_sig) ,	// output [255:0] clock_crossing_0_m1_readdata_sig
	.clock_crossing_0_m1_readdatavalid(clock_crossing_0_m1_readdatavalid_sig) ,	// output  clock_crossing_0_m1_readdatavalid_sig
	.clock_crossing_0_m1_reset_n(clock_crossing_0_m1_reset_n_sig) ,	// output  clock_crossing_0_m1_reset_n_sig
	.clock_crossing_0_m1_waitrequest(clock_crossing_0_m1_waitrequest_sig) 	// output  clock_crossing_0_m1_waitrequest_sig
);

