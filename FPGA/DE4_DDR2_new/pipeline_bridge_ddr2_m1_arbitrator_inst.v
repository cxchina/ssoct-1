// Copyright (C) 1991-2010 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.


// Generated by Quartus II 64-Bit Version 9.1 (Build Build 350 03/24/2010)
// Created on Thu Nov 10 19:33:38 2011

pipeline_bridge_ddr2_m1_arbitrator pipeline_bridge_ddr2_m1_arbitrator_inst
(
	.clk(clk_sig) ,	// input  clk_sig
	.d1_ddr2_s1_end_xfer(d1_ddr2_s1_end_xfer_sig) ,	// input  d1_ddr2_s1_end_xfer_sig
	.ddr2_s1_readdata_from_sa(ddr2_s1_readdata_from_sa_sig) ,	// input [255:0] ddr2_s1_readdata_from_sa_sig
	.ddr2_s1_waitrequest_n_from_sa(ddr2_s1_waitrequest_n_from_sa_sig) ,	// input  ddr2_s1_waitrequest_n_from_sa_sig
	.pipeline_bridge_ddr2_m1_address(pipeline_bridge_ddr2_m1_address_sig) ,	// input [29:0] pipeline_bridge_ddr2_m1_address_sig
	.pipeline_bridge_ddr2_m1_burstcount(pipeline_bridge_ddr2_m1_burstcount_sig) ,	// input  pipeline_bridge_ddr2_m1_burstcount_sig
	.pipeline_bridge_ddr2_m1_byteenable(pipeline_bridge_ddr2_m1_byteenable_sig) ,	// input [3:0] pipeline_bridge_ddr2_m1_byteenable_sig
	.pipeline_bridge_ddr2_m1_chipselect(pipeline_bridge_ddr2_m1_chipselect_sig) ,	// input  pipeline_bridge_ddr2_m1_chipselect_sig
	.pipeline_bridge_ddr2_m1_granted_ddr2_s1(pipeline_bridge_ddr2_m1_granted_ddr2_s1_sig) ,	// input  pipeline_bridge_ddr2_m1_granted_ddr2_s1_sig
	.pipeline_bridge_ddr2_m1_qualified_request_ddr2_s1(pipeline_bridge_ddr2_m1_qualified_request_ddr2_s1_sig) ,	// input  pipeline_bridge_ddr2_m1_qualified_request_ddr2_s1_sig
	.pipeline_bridge_ddr2_m1_read(pipeline_bridge_ddr2_m1_read_sig) ,	// input  pipeline_bridge_ddr2_m1_read_sig
	.pipeline_bridge_ddr2_m1_read_data_valid_ddr2_s1(pipeline_bridge_ddr2_m1_read_data_valid_ddr2_s1_sig) ,	// input  pipeline_bridge_ddr2_m1_read_data_valid_ddr2_s1_sig
	.pipeline_bridge_ddr2_m1_read_data_valid_ddr2_s1_shift_register(pipeline_bridge_ddr2_m1_read_data_valid_ddr2_s1_shift_register_sig) ,	// input  pipeline_bridge_ddr2_m1_read_data_valid_ddr2_s1_shift_register_sig
	.pipeline_bridge_ddr2_m1_requests_ddr2_s1(pipeline_bridge_ddr2_m1_requests_ddr2_s1_sig) ,	// input  pipeline_bridge_ddr2_m1_requests_ddr2_s1_sig
	.pipeline_bridge_ddr2_m1_write(pipeline_bridge_ddr2_m1_write_sig) ,	// input  pipeline_bridge_ddr2_m1_write_sig
	.pipeline_bridge_ddr2_m1_writedata(pipeline_bridge_ddr2_m1_writedata_sig) ,	// input [31:0] pipeline_bridge_ddr2_m1_writedata_sig
	.reset_n(reset_n_sig) ,	// input  reset_n_sig
	.pipeline_bridge_ddr2_m1_address_to_slave(pipeline_bridge_ddr2_m1_address_to_slave_sig) ,	// output [29:0] pipeline_bridge_ddr2_m1_address_to_slave_sig
	.pipeline_bridge_ddr2_m1_latency_counter(pipeline_bridge_ddr2_m1_latency_counter_sig) ,	// output  pipeline_bridge_ddr2_m1_latency_counter_sig
	.pipeline_bridge_ddr2_m1_readdata(pipeline_bridge_ddr2_m1_readdata_sig) ,	// output [31:0] pipeline_bridge_ddr2_m1_readdata_sig
	.pipeline_bridge_ddr2_m1_readdatavalid(pipeline_bridge_ddr2_m1_readdatavalid_sig) ,	// output  pipeline_bridge_ddr2_m1_readdatavalid_sig
	.pipeline_bridge_ddr2_m1_waitrequest(pipeline_bridge_ddr2_m1_waitrequest_sig) 	// output  pipeline_bridge_ddr2_m1_waitrequest_sig
);

